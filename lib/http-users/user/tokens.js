/*
 * tokens.js: Resource extensions and routes for working with API tokens.
 *
 * (C) 2012, Nodejitsu Inc.
 *
 */

var uuid = require('node-uuid'),
    async = require('flatiron').common.async;

//
// ### function resource (app)
// #### @app {flatiron.App} Application to extend User resource
//
// Extends the User resource for the `app` with functionality working
// with api tokens.
//
exports.resource = function (app) {

  //
  // Grab the `User` resource from the `app`.
  //
  var User = app.resources.User;
  
  //
  // ### function tokens (username, callback)
  // #### @callback {function} Continuation to respond to when complete.
  //
  // Returns all tokens for the specified `user`.
  //
  User.tokens = function (username, callback) {
    User.get(username, function (err, user) {
      if (err) {
        return callback(err);
      }

      //
      // Update the instance
      //
      var apiTokens = user.apiTokens || {};

      callback(null, {apiTokens: apiTokens});
    });
  };

  //
  // ### function addToken (name, data, callback)
  // #### @username {string} Name of the user to update
  // #### @tokenname {string} **Optional** Name of the token to add.
  // #### @callback {function} Continuation to respond to when complete.
  //
  User.addToken = function (username, tokenname, callback) {
    if (typeof tokenname === "function") {
      callback = tokenname;
      tokenname = 'gen_' + (~~(Math.random() * 1e9)).toString(36);
    }

    //
    // Token is just a uuid generated by us
    //
    var token = uuid.v4();

    //
    // Fetch the existing tokens and add the new one.
    // If tokens did not exist before create them
    //
    User.get(username, function (err, user) {
      if (err) {
        return callback(err);
      }

      //
      // Update our instance
      //
      var apiTokens = user.apiTokens || {};

      //
      // Create/Update the new token
      //
      apiTokens[tokenname] = token;

      //
      // Update the user document with the new `apiTokens`
      //
      User.update(username, { apiTokens: apiTokens }, function (err) {
        if (err) {
          return callback(err);
        }

        //
        // Generate the response object
        // The user needs to know what his token was named and what the 
        // actual token is
        //
        var newToken = {};
        newToken[tokenname] = token;

        callback(null, newToken);
      });
    });
  };
};

//
// ### function routes (app)
// #### @app {flatiron.App} Application to extend with routes
//
// Extends the target `app` with routes for working with API tokens.
//
exports.routes = function (app) {
  //
  // Setup RESTful web service for `/users/:username/tokens`
  //
  app.router.path('/users/:username/tokens', function () {
    //
    // List Tokens: GET to `/users/:username/tokens` returns list of tokens
    //            for all users.
    //
    this.get(function (username) {
      var res = this.res;
      app.resources.User.tokens(username, function (err, tokens) {
        return err
          ? res.json(500, err)
          : res.json(200, tokens);
      });
    });

    //
    // Add / Update Token: POST to `/tokens/:username/:tokenname` updates the
    //                   value of the tokens object.
    //
    function addOrUpdateToken(username, tokenname, callback) {
      if (arguments.length === 2) {
        callback = tokenname;
        tokenname = 'gen_' + (~~(Math.random() * 1e9)).toString(36);
      }

      var res = this.res;

      app.resources.User.addToken(username, tokenname, function (err, newToken) {
        return err ? res.json(500, err) : res.json(201, newToken);
      });

    }

    //
    // POST /users/:userid/tokens/:tokenname
    //
    this.put('/:tokenname', addOrUpdateToken);

    //
    // POST /users/:userid/tokens
    //
    this.post(addOrUpdateToken);
  });
};
